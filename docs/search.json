[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "update_xl",
    "section": "",
    "text": "For when Excel is used as a database\nThis package simplifies the process of updating Excel \u201cdatabases\u201d - a common use case for many organizations. Despite Excel not being a true database management system, it is widely used as such due to its accessibility and familiarity.\nThis package provides a set of features to make updating Excel data effortless and reliable. Key features include:",
    "crumbs": [
      "update_xl"
    ]
  },
  {
    "objectID": "index.html#summarized-steps",
    "href": "index.html#summarized-steps",
    "title": "update_xl",
    "section": "Summarized Steps",
    "text": "Summarized Steps\n\nCreate a workbook with two sheets containing the original data and the update data.\nRun core.main\nPaste result into original data file (either manually or w/ VBA)\n\nA step-by-step example can be found in 03_example in the documentation.",
    "crumbs": [
      "update_xl"
    ]
  },
  {
    "objectID": "index.html#demo",
    "href": "index.html#demo",
    "title": "update_xl",
    "section": "Demo",
    "text": "Demo",
    "crumbs": [
      "update_xl"
    ]
  },
  {
    "objectID": "test_update_xl.html",
    "href": "test_update_xl.html",
    "title": "02_test_update_xl",
    "section": "",
    "text": "..."
  },
  {
    "objectID": "core.html",
    "href": "core.html",
    "title": "00_core",
    "section": "",
    "text": "00 init fxs\n\nsource\n\nyaml_helper\n\n yaml_helper (fpath:str='./config.yaml', mode:str='r', data:dict=None)\n\nHelper function to read, write, append to files in yaml format. Checks for duplicate keys if reading or appending.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nfpath\nstr\n./config.yaml\nstr\n\n\nmode\nstr\nr\nstr - r / a / w\n\n\ndata\ndict\nNone\ndict - cannot be None if writing or appending\n\n\nReturns\ndict\n\ndict - data if reading, {\u2018r\u2019: 0} if writing/appending\n\n\n\n\nsource\n\n\nfp\n\n fp (relative_fp:str, base_dir:str='.')\n\nFor referencing relative file paths in package directory.\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nrelative_fp\nstr\n\nstr - eg. \u201c../dir/file.txt\u201d\n\n\nbase_dir\nstr\n.\nstr\n\n\nReturns\nstr\n\nstr\n\n\n\n\n\n\n01 update\n\nsource\n\nmain\n\n main (key_col:str, str_cols:list=None, input_file:str='./Book1.xlsx')\n\n\u2026\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nkey_col\nstr\n\nunique id column\n\n\nstr_cols\nlist\nNone\nAdd all cols where there may be leading zeroes that should be preserved, or if the values should be read in as string.\n\n\ninput_file\nstr\n./Book1.xlsx\nname/path to input file\n\n\nReturns\nNone",
    "crumbs": [
      "00_core"
    ]
  },
  {
    "objectID": "compare.html",
    "href": "compare.html",
    "title": "01_compare",
    "section": "",
    "text": "..."
  },
  {
    "objectID": "example.html",
    "href": "example.html",
    "title": "03_example",
    "section": "",
    "text": "Open both the original data file and file w/ updates.\nIn the original data file, select the header cell for the key column and run the copy_subset command (VBA snippet can be found below). When prompted, select the header columns in the file w/ updates.\nStep 2 will create a new sheet. Move this sheet to the file w/ updates. Rename the sheet to original and rename the sheet w/ updates to update.\nRun core.main and move the result to the original data file.\nSelect the header cell for the key column in the original data tab and run the paste_subset command. When prompted, enter the name of the result sheet (by default, it should be result).\nOpen the VBA console\u2019s Immediate Window to double check what columns were updated.\n\n\n\n\nEnsure column names are identical in both original and update files\nEnsure all column names are unique in the original file, unless they won\u2019t be updated via this method\n\n\n\n\n\nSteps 1-3 will result in a file similar to example/begin.xlsx. Here you can see we have all the main data types in the original sheet: string, dates, boolean, float, and int.\nIn the update sheet you will notice not all cells are filled in because they don\u2019t need to be. If there are no changes, you can leave the cells blank and it won\u2019t overwrite anything.\nOf note are cells G7 and F8. G7 will clear any existing data and F8 will append the comment to the existing data:\n\n\n\nscreenshot\n\n\nStep 4 is to run core.main (ignore REFRESH). Here you specify the key/ID column (must be unique).\n\n\nCode\n# * DOC\nfrom update_xl import core as uxl\n\nif REFRESH:\n    uxl.main(\n        key_col=\"id\",\n        str_cols=[\"postal_code\"],  # the key column will always be added\n        input_file=\"../example/begin.xlsx\",\n    )\n\n\nThe result and changelog is added to the same input file. Here we have renamed it to middle.xlsx.\nYou will notice something strange with the boolean and int columns:\n\n\n\nscreenshot2\n\n\nThe ints aren\u2019t really too big an issue - the only adverse effect is cluttering up the changelog, which could be cleaned separately.\nThe boolean column might be an issue so it\u2019s better to avoid booleans altogether and use a string representation instead (\u2018Y\u2019/\u2018N\u2019).\nThe result is in the same order as the original data and can be copy/pasted into the original data via VBA script (or manually, if the dataset is small enough).\nPasting in this way preserves any notes added to cells, as can be seen in end.xlsx: \nOpen the VBA console\u2019s Immediate Window to double check what columns were updated. It should be noted that columns updated in this way need to have unique names, otherwise results may be unexpected.\n\n\n\nscreenshot4\n\n\n\n\n\nEasiest way to use these scripts is to add it to your Personal.xlsb file and add the commands to the ribbon. This way, you can run macros even in files without the xlsm extension.\n\n\n\nimage\n\n\n\n\nSub copy_subset()\n\nDim input_col_heads As Variant\nDim i As Long\nApplication.ScreenUpdating = False\n\n' select header of key col\nRange(ActiveCell, ActiveCell.End(xlDown)).Select\n\ncol_head_row = ActiveCell.Row\ntotal_rows = Selection.Rows.Count\n\nSelection.Copy\n\ncurr_sht_name = ActiveSheet.Name\nSheets.Add\nnew_sheet_name = ActiveSheet.Name\n\nSheets(new_sheet_name).Cells(1, 1).Select\nActiveCell.PasteSpecial xlPasteFormats\nActiveCell.PasteSpecial xlPasteValues\n\nSet select_cells = Application.InputBox( _\n  Title:=\"Input\", _\n  Prompt:=\"Select Column Headers in Update Data\", _\n  Type:=8)\ninput_col_heads = select_cells.Value\n\n\nFor i = LBound(input_col_heads, 2) To UBound(input_col_heads, 2)\n\n    col_head_name = input_col_heads(1, i)\n    \n    rel_col = Sheets(curr_sht_name).Cells(col_head_row, 1).EntireRow.Find(What:=col_head_name, _\n    LookIn:=xlValues, LookAt:=xlWhole, SearchOrder:=xlByColumns, _\n    SearchDirection:=xlNext, MatchCase:=True).Column\n    \n    Sheets(curr_sht_name).Activate\n    ActiveSheet.Range(Cells(col_head_row, rel_col), Cells(col_head_row - 1 + total_rows, rel_col)).Select\n    Selection.Copy\n    \n    Sheets(new_sheet_name).Activate\n    Sheets(new_sheet_name).Cells(1, i + 2).Select\n    ActiveCell.PasteSpecial xlPasteFormats\n    ActiveCell.PasteSpecial xlPasteValues\n\nNext i\n\nColumns(\"A\").Select\nSelection.Delete\nColumns(\"A\").Select\nSelection.Delete\n\nApplication.ScreenUpdating = True\n\nEnd Sub\n\n\n\nSub paste_subset()\n\nApplication.ScreenUpdating = False\n\n' select key col header on original data sheet\noriginal_data_sht = ActiveSheet.Name\nkey_col = ActiveCell.Value\n\ncol_head_row = ActiveCell.Row\nActiveCell.End(xlDown).Select\nt_row_count = ActiveCell.Row\nrow_count = t_row_count + 1 - col_head_row ' updated 20240615 - ensures no empty cells\n\n' input - enter result sheet\nupdated_data_sht = InputBox(\"Enter name of update result sheet: \", \"Input\", \"result\")\nSheets(updated_data_sht).Select\n\n' get dimensions\n'Cells(1, 1).End(xlDown).Select\n'row_count = ActiveCell.Row\n\nCells(1, 1).End(xlToRight).Select\ncol_count = ActiveCell.Column\n\nDebug.Print (\"Shape:\")\nDebug.Print (row_count - 1)\nDebug.Print (col_count - 1)\nDebug.Print (\"\")\n\n' loop\nFor i = 1 To col_count\n    col_head_name = Cells(1, i)\n    \n    If col_head_name = key_col Then\n        ' pass\n    Else\n        rel_col = Sheets(original_data_sht).Cells(col_head_row, 1).EntireRow.Find(What:=col_head_name, _\n        LookIn:=xlValues, LookAt:=xlWhole, SearchOrder:=xlByColumns, _\n        SearchDirection:=xlNext, MatchCase:=True).Column\n          \n        ActiveSheet.Range(Cells(1, i), Cells(row_count, i)).Select\n        Selection.Copy\n        \n        Sheets(original_data_sht).Activate\n        Sheets(original_data_sht).Cells(col_head_row, rel_col).Select\n        \n        ' data validation\n        Debug.Print (col_head_name)\n        Debug.Print (ActiveCell.Value)\n        Debug.Print (ActiveCell.Address)\n        Debug.Print (\"\")\n        \n        ActiveCell.PasteSpecial xlPasteValues\n        \n        Sheets(updated_data_sht).Activate\n    End If\nNext i\n\n'Application.DisplayAlerts = False\n'Sheets(updated_data_sht).Delete\n'Application.DisplayAlerts = True\n\nApplication.ScreenUpdating = True\n\nEnd Sub",
    "crumbs": [
      "03_example"
    ]
  },
  {
    "objectID": "example.html#step-by-step",
    "href": "example.html#step-by-step",
    "title": "03_example",
    "section": "",
    "text": "Steps 1-3 will result in a file similar to example/begin.xlsx. Here you can see we have all the main data types in the original sheet: string, dates, boolean, float, and int.\nIn the update sheet you will notice not all cells are filled in because they don\u2019t need to be. If there are no changes, you can leave the cells blank and it won\u2019t overwrite anything.\nOf note are cells G7 and F8. G7 will clear any existing data and F8 will append the comment to the existing data:\n\n\n\nscreenshot\n\n\nStep 4 is to run core.main (ignore REFRESH). Here you specify the key/ID column (must be unique).\n\n\nCode\n# * DOC\nfrom update_xl import core as uxl\n\nif REFRESH:\n    uxl.main(\n        key_col=\"id\",\n        str_cols=[\"postal_code\"],  # the key column will always be added\n        input_file=\"../example/begin.xlsx\",\n    )\n\n\nThe result and changelog is added to the same input file. Here we have renamed it to middle.xlsx.\nYou will notice something strange with the boolean and int columns:\n\n\n\nscreenshot2\n\n\nThe ints aren\u2019t really too big an issue - the only adverse effect is cluttering up the changelog, which could be cleaned separately.\nThe boolean column might be an issue so it\u2019s better to avoid booleans altogether and use a string representation instead (\u2018Y\u2019/\u2018N\u2019).\nThe result is in the same order as the original data and can be copy/pasted into the original data via VBA script (or manually, if the dataset is small enough).\nPasting in this way preserves any notes added to cells, as can be seen in end.xlsx: \nOpen the VBA console\u2019s Immediate Window to double check what columns were updated. It should be noted that columns updated in this way need to have unique names, otherwise results may be unexpected.\n\n\n\nscreenshot4",
    "crumbs": [
      "03_example"
    ]
  },
  {
    "objectID": "example.html#vba-scripts",
    "href": "example.html#vba-scripts",
    "title": "03_example",
    "section": "",
    "text": "Easiest way to use these scripts is to add it to your Personal.xlsb file and add the commands to the ribbon. This way, you can run macros even in files without the xlsm extension.\n\n\n\nimage\n\n\n\n\nSub copy_subset()\n\nDim input_col_heads As Variant\nDim i As Long\nApplication.ScreenUpdating = False\n\n' select header of key col\nRange(ActiveCell, ActiveCell.End(xlDown)).Select\n\ncol_head_row = ActiveCell.Row\ntotal_rows = Selection.Rows.Count\n\nSelection.Copy\n\ncurr_sht_name = ActiveSheet.Name\nSheets.Add\nnew_sheet_name = ActiveSheet.Name\n\nSheets(new_sheet_name).Cells(1, 1).Select\nActiveCell.PasteSpecial xlPasteFormats\nActiveCell.PasteSpecial xlPasteValues\n\nSet select_cells = Application.InputBox( _\n  Title:=\"Input\", _\n  Prompt:=\"Select Column Headers in Update Data\", _\n  Type:=8)\ninput_col_heads = select_cells.Value\n\n\nFor i = LBound(input_col_heads, 2) To UBound(input_col_heads, 2)\n\n    col_head_name = input_col_heads(1, i)\n    \n    rel_col = Sheets(curr_sht_name).Cells(col_head_row, 1).EntireRow.Find(What:=col_head_name, _\n    LookIn:=xlValues, LookAt:=xlWhole, SearchOrder:=xlByColumns, _\n    SearchDirection:=xlNext, MatchCase:=True).Column\n    \n    Sheets(curr_sht_name).Activate\n    ActiveSheet.Range(Cells(col_head_row, rel_col), Cells(col_head_row - 1 + total_rows, rel_col)).Select\n    Selection.Copy\n    \n    Sheets(new_sheet_name).Activate\n    Sheets(new_sheet_name).Cells(1, i + 2).Select\n    ActiveCell.PasteSpecial xlPasteFormats\n    ActiveCell.PasteSpecial xlPasteValues\n\nNext i\n\nColumns(\"A\").Select\nSelection.Delete\nColumns(\"A\").Select\nSelection.Delete\n\nApplication.ScreenUpdating = True\n\nEnd Sub\n\n\n\nSub paste_subset()\n\nApplication.ScreenUpdating = False\n\n' select key col header on original data sheet\noriginal_data_sht = ActiveSheet.Name\nkey_col = ActiveCell.Value\n\ncol_head_row = ActiveCell.Row\nActiveCell.End(xlDown).Select\nt_row_count = ActiveCell.Row\nrow_count = t_row_count + 1 - col_head_row ' updated 20240615 - ensures no empty cells\n\n' input - enter result sheet\nupdated_data_sht = InputBox(\"Enter name of update result sheet: \", \"Input\", \"result\")\nSheets(updated_data_sht).Select\n\n' get dimensions\n'Cells(1, 1).End(xlDown).Select\n'row_count = ActiveCell.Row\n\nCells(1, 1).End(xlToRight).Select\ncol_count = ActiveCell.Column\n\nDebug.Print (\"Shape:\")\nDebug.Print (row_count - 1)\nDebug.Print (col_count - 1)\nDebug.Print (\"\")\n\n' loop\nFor i = 1 To col_count\n    col_head_name = Cells(1, i)\n    \n    If col_head_name = key_col Then\n        ' pass\n    Else\n        rel_col = Sheets(original_data_sht).Cells(col_head_row, 1).EntireRow.Find(What:=col_head_name, _\n        LookIn:=xlValues, LookAt:=xlWhole, SearchOrder:=xlByColumns, _\n        SearchDirection:=xlNext, MatchCase:=True).Column\n          \n        ActiveSheet.Range(Cells(1, i), Cells(row_count, i)).Select\n        Selection.Copy\n        \n        Sheets(original_data_sht).Activate\n        Sheets(original_data_sht).Cells(col_head_row, rel_col).Select\n        \n        ' data validation\n        Debug.Print (col_head_name)\n        Debug.Print (ActiveCell.Value)\n        Debug.Print (ActiveCell.Address)\n        Debug.Print (\"\")\n        \n        ActiveCell.PasteSpecial xlPasteValues\n        \n        Sheets(updated_data_sht).Activate\n    End If\nNext i\n\n'Application.DisplayAlerts = False\n'Sheets(updated_data_sht).Delete\n'Application.DisplayAlerts = True\n\nApplication.ScreenUpdating = True\n\nEnd Sub",
    "crumbs": [
      "03_example"
    ]
  }
]