[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "update_xl",
    "section": "",
    "text": "For when Excel is used as a database\n\nDespite not being best practice, many organizations/teams continue to use Excel as a (pseudo) database due to its accessibility and familiarity. This package simplifies the process of updating such “databases”, providing a set of features to make data updates effortless and reliable.\nKey features\n\nOnly needing to provide data that needs to be updated. Blank cells in the update file are automatically filled with the original values, ensuring that existing data is not unintentionally overwritten.\nComprehensive validation checks to ensure data integrity.\nAbility to append to, instead of overwrite, existing data. Useful for ‘comment’ columns, for instance.\n\nAbility to preserve existing notes and formatting in the original data file.\nCreates a human readable changelog showing exactly what was updated and when.\n\nA video demo and step-by-step example can be found in 01_example in the documentation.",
    "crumbs": [
      "update_xl"
    ]
  },
  {
    "objectID": "core.html",
    "href": "core.html",
    "title": "00_core",
    "section": "",
    "text": "fp (_path:str='', ambiguous_err:bool=True)\n\nFor referencing relative file paths in dev env. Assumes core is always one level down from project root directory.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\n_path\nstr\n\nstr - eg. \"../dat/some_file.csv\" == \"&lt;project_root&gt;/dat/some_file.csv&gt;\"\n\n\nambiguous_err\nbool\nTrue\nbool - if True, will raise exception if path is ambiguous when running docs generation vs dev env\n\n\nReturns\nstr\n\nstr\n\n\n\n\n\n\n\n\n yaml_helper (fpath:str='./config.yaml', mode:str='r',\n              data:Optional[dict]=None)\n\nHelper function to read, write, append to files in yaml format. Checks for duplicate keys if reading or appending.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nfpath\nstr\n./config.yaml\nstr\n\n\nmode\nstr\nr\nstr - r / a / w\n\n\ndata\nOptional\nNone\ncannot be None if writing or appending\n\n\nReturns\ndict\n\ndict - data if reading, {‘r’: 0} if writing/appending",
    "crumbs": [
      "00_core"
    ]
  },
  {
    "objectID": "core.html#main",
    "href": "core.html#main",
    "title": "00_core",
    "section": "main",
    "text": "main\n\n\nmain\n\n main (key_col:str, str_cols:Optional[list]=None,\n       input_file:str='./Book1.xlsx', _changelog_dir:str='./')\n\n…\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nkey_col\nstr\n\nunique id column\n\n\nstr_cols\nOptional\nNone\nAdd all cols where there may be leading zeroes that should be preserved, or if the values should be read in as string.\n\n\ninput_file\nstr\n./Book1.xlsx\nname/path to input file\n\n\n_changelog_dir\nstr\n./\nset path for changelog yml output\n\n\nReturns\nNone",
    "crumbs": [
      "00_core"
    ]
  },
  {
    "objectID": "example.html",
    "href": "example.html",
    "title": "01_example",
    "section": "",
    "text": "Code\nfrom IPython.display import HTML\n\n\nHTML(\n    \"\"\"\n&lt;video width=\"640\" height=\"480\" controls&gt;\n  &lt;source src=\"demo.mp4\" type=\"video/mp4\"&gt;\n&lt;/video&gt;\n\"\"\"\n)",
    "crumbs": [
      "01_example"
    ]
  },
  {
    "objectID": "example.html#demo",
    "href": "example.html#demo",
    "title": "01_example",
    "section": "",
    "text": "Code\nfrom IPython.display import HTML\n\n\nHTML(\n    \"\"\"\n&lt;video width=\"640\" height=\"480\" controls&gt;\n  &lt;source src=\"demo.mp4\" type=\"video/mp4\"&gt;\n&lt;/video&gt;\n\"\"\"\n)",
    "crumbs": [
      "01_example"
    ]
  },
  {
    "objectID": "example.html#summarized-steps",
    "href": "example.html#summarized-steps",
    "title": "01_example",
    "section": "Summarized Steps",
    "text": "Summarized Steps\n\nCreate a workbook with two sheets containing the original data and the update data.\nRun core.main\nPaste result into original data file, either manually or w/ the VBA macro found below",
    "crumbs": [
      "01_example"
    ]
  },
  {
    "objectID": "example.html#detailed-process",
    "href": "example.html#detailed-process",
    "title": "01_example",
    "section": "Detailed Process",
    "text": "Detailed Process\n\nOpen both the original data file and file with updates. Create a new file with two tabs, one containing the update data, the other containing the original data.\n\nVBA snippet can be found below for copying only the required columns from the original data, for cases where the file size is on the larger side.\n\n\nRename the sheet w/ original data to original and rename the sheet w/ updates to update.\nRun the core.main function and copy the result sheet to the original data file.\nRun the paste_subset VBA macro. When prompted, enter the name of the result sheet (by default, it should be result).\n\nAlternatively, if the dataset is small enough, the result can be pasted in manually\n\n\n\nStep by step\nExample files can be found here.\nSteps 1-2 will result in a file similar to example/1_begin.xlsx. Here you can see we have all the main data types in the original sheet: string, dates, boolean, float, and int.\nIn the update sheet you will notice not all cells are filled in because they don’t need to be. If there are no changes, you can leave the cells blank and it won’t overwrite anything - they will be filled with the original values.\nOf note are cells G7 and F8. G7 will clear any existing data and F8 will append the comment to the existing data:\n\n\n\nscreenshot\n\n\nStep 3 is to run the core.main function. Here you specify the unique key/ID column and other parameters.\nfrom update_xl import core \n\n\ncore.main(\n    key_col=\"id\",\n    str_cols=[\"postal_code\"],  # the key column will always be added\n    input_file=\"../example/begin.xlsx\",\n)\nThe result is added to the same input file. Here we have renamed it to 2_middle.xlsx.\nThe changelog is exported in the current working directory in YAML format for better human readability:\n\n\n\nchangelog_screenshot\n\n\nThe result is in the same order as the original data and can be copy/pasted into the original data via VBA script (or manually, if the dataset is small enough).\nPasting in this way preserves any notes added to cells, as can be seen in 3_end.xlsx:\n\n\n\nresult_screenshot\n\n\nOpen the Immediate Window in the developer tab to double check what columns were updated. It should be noted that columns updated in this way need to have unique names, otherwise the result may be unexpected.\n\n\n\nimmediate_window",
    "crumbs": [
      "01_example"
    ]
  },
  {
    "objectID": "example.html#vba-scripts",
    "href": "example.html#vba-scripts",
    "title": "01_example",
    "section": "VBA scripts",
    "text": "VBA scripts\nThe easiest way to use these scripts is to add it to your Personal.xlsb file and add the commands to the ribbon. This way, you can run macros even in files without the xlsm extension.\n\n\n\nribbon\n\n\n\nCopy original\nSub copy_subset()\n' Creates a new sheet - copies only the columns that need updating from the original data file. \n\nDim input_col_heads As Variant\nDim i As Long\nApplication.ScreenUpdating = False\n\n' Select header cell of key column first\nRange(ActiveCell, ActiveCell.End(xlDown)).Select\n\ncol_head_row = ActiveCell.Row\ntotal_rows = Selection.Rows.Count\n\nSelection.Copy\n\ncurr_sht_name = ActiveSheet.Name\nSheets.Add\nnew_sheet_name = ActiveSheet.Name\n\nSheets(new_sheet_name).Cells(1, 1).Select\nActiveCell.PasteSpecial xlPasteFormats\nActiveCell.PasteSpecial xlPasteValues\n\n' input - select header row of updata data\nSet select_cells = Application.InputBox( _\n  Title:=\"Input\", _\n  Prompt:=\"Select Column Headers in Update Data\", _\n  Type:=8)\ninput_col_heads = select_cells.Value\n\n\nFor i = LBound(input_col_heads, 2) To UBound(input_col_heads, 2)\n\n    col_head_name = input_col_heads(1, i)\n    \n    rel_col = Sheets(curr_sht_name).Cells(col_head_row, 1).EntireRow.Find(What:=col_head_name, _\n    LookIn:=xlValues, LookAt:=xlWhole, SearchOrder:=xlByColumns, _\n    SearchDirection:=xlNext, MatchCase:=True).Column\n    \n    Sheets(curr_sht_name).Activate\n    ActiveSheet.Range(Cells(col_head_row, rel_col), Cells(col_head_row - 1 + total_rows, rel_col)).Select\n    Selection.Copy\n    \n    Sheets(new_sheet_name).Activate\n    Sheets(new_sheet_name).Cells(1, i + 2).Select\n    ActiveCell.PasteSpecial xlPasteFormats\n    ActiveCell.PasteSpecial xlPasteValues\n\nNext i\n\nColumns(\"A\").Select\nSelection.Delete\nColumns(\"A\").Select\nSelection.Delete\n\nApplication.ScreenUpdating = True\n\nEnd Sub\n\n\nPaste result\nSub paste_subset()\n' Paste result into original data. Assumes the result sheet is in the same workbook.\n\nApplication.ScreenUpdating = False\n\n' Select header cell of key column in original data sheet first\noriginal_data_sht = ActiveSheet.Name\nkey_col = ActiveCell.Value\n\ncol_head_row = ActiveCell.Row\nActiveCell.End(xlDown).Select\nt_row_count = ActiveCell.Row\nrow_count = t_row_count + 1 - col_head_row \n\n' input - enter result sheet name\nupdated_data_sht = InputBox(\"Enter name of update result sheet: \", \"Input\", \"result\")\nSheets(updated_data_sht).Select\n\n' get dimensions\n'Cells(1, 1).End(xlDown).Select\n'row_count = ActiveCell.Row\n\nCells(1, 1).End(xlToRight).Select\ncol_count = ActiveCell.Column\n\nDebug.Print (\"Shape:\")\nDebug.Print (row_count - 1)\nDebug.Print (col_count - 1)\nDebug.Print (\"\")\n\n' loop\nFor i = 1 To col_count\n    col_head_name = Cells(1, i)\n    \n    If col_head_name = key_col Then\n        ' pass\n    Else\n        rel_col = Sheets(original_data_sht).Cells(col_head_row, 1).EntireRow.Find(What:=col_head_name, _\n        LookIn:=xlValues, LookAt:=xlWhole, SearchOrder:=xlByColumns, _\n        SearchDirection:=xlNext, MatchCase:=True).Column\n          \n        ActiveSheet.Range(Cells(1, i), Cells(row_count, i)).Select\n        Selection.Copy\n        \n        Sheets(original_data_sht).Activate\n        Sheets(original_data_sht).Cells(col_head_row, rel_col).Select\n        \n        ' data validation\n        Debug.Print (col_head_name)\n        Debug.Print (ActiveCell.Value)\n        Debug.Print (ActiveCell.Address)\n        Debug.Print (\"\")\n        \n        ActiveCell.PasteSpecial xlPasteValues\n        \n        Sheets(updated_data_sht).Activate\n    End If\nNext i\n\nApplication.ScreenUpdating = True\n\nEnd Sub",
    "crumbs": [
      "01_example"
    ]
  }
]